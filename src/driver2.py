# -*- coding: utf-8 -*-
"""analysis_w_paper_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EZTRUg9Hg-sofoig8vkJjhp_09YQnn_G
"""
#!pip install optuna
#import index_maker
import util
import argparse
import yaml
import importlib
import optuna
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import tensorflow as tf
import random
from sklearn.ensemble import RandomForestRegressor
from tensorflow.keras.layers import BatchNormalization
from tensorflow.keras.layers import Activation, Dropout, Flatten, Input, Dense, concatenate 
from sklearn.metrics import accuracy_score, precision_score, recall_score, r2_score, mean_squared_error, mean_absolute_percentage_error
from tensorflow.keras.models import Model, Sequential, load_model
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
import preprocessing
import dataloader
from preprocessing import preprocessor
from dataloader import dataLoader
import sys
import os
import os.path
import csv
#import ensemRegressor
#import transfer_learning
#import optunatransformator1
#import stacked_model
#import k_regressor
import random_forrest
#import IPT
#import train_only
#import source_only
import mpi4py
#from transfer_learning import transfer_learning
#from stacked_model import stacked_model
#from k_regressor import k_regressor
from random_forrest import random_forrest
#from IPT import IPT
#from train_only import train_only
#from source_only import source_only
from mpi4py import MPI
#np.random.seed(1)  
#tf.random.set_seed(2)
#import optunannPOD
import re    
if __name__ == "__main__":
  comm = MPI.COMM_WORLD
  rank = comm.Get_rank()
  print(f"Rank is {rank}")
  #path_to_module = '/content/drive/MyDrive/'
  np.random.seed(1)  
  tf.random.set_seed(2)
  
  os.chdir("../../")
  parser = argparse.ArgumentParser()
  parser.add_argument('target_app', type=str,  help="name of the target domain")
  parser.add_argument('use_case', type=str,  help="which do want to fo from train_only, source_only, transfer_learning, random_forrest, k_regressor, IPT and stacked_model")
  parser.add_argument('yaml', type=str,  help="what will be the yaml file")
  args = parser.parse_args()
  with open(os.getcwd()+args.yaml, "r") as f:
    global_config= yaml.load(f, Loader=yaml.FullLoader)
  test_samples = global_config['test_samples']
  use_case_specific_config = global_config[args.use_case]
  #loader = dataLoader(os.getcwd()+global_config["src_path"], os.getcwd()+global_config["tar_path"])
  #loader.loadData()
  #src_x, src_y, tar_x, tar_y = loader.getXY("", "",global_config["target_label"])
  #src_x, src_y, tar_x, tar_y = loader.src_tx, loader.src_y, loader.tar_tx, loader.tar_y
  qrrploader = dataLoader(os.getcwd()+global_config["src_path1"] ,os.getcwd()+global_config["tar_path1"] )
  qrrploader.loadData()
  qrrp_src_x, qrrp_src_y, qrrp_tar_x, qrrp_tar_y = qrrploader.getXY("", "",["rp"])
  qrrp_p = preprocessor(qrrp_src_x, qrrp_src_y, qrrp_tar_x, qrrp_tar_y, 0)
  qrrp_p.setTargetColumn(["rp"])
  qrrp_src_tx, qrrp_src_ty = qrrploader.getSrcXY()
  qrrp_p.setSrcDFXY(qrrp_src_tx, qrrp_src_ty)
  qrrp_tar_tx, qrrp_tar_ty = qrrploader.getTarXY()
  qrrp_p.setTarDFXY(qrrp_tar_tx, qrrp_tar_ty)
  qrrp_p.preprocess()
  qrrp_tar_x_scaled, qrrp_tar_y_scaled = qrrp_p.getTargetScaled()
  qrrp_X_train, qrrp_y_train, qrrp_src_train, qrrp_src_y_train, qrrp_src_val, qrrp_src_y_val, qrrp_X_test, qrrp_y_test = qrrp_p.train_test_val( 0.05, 0.25, 42, 84) #100, 812
  """
  """
  """
  """
  try:
    with tf.device('/gpu:0'):
      module_name, func_name = use_case_specific_config["module_name"], use_case_specific_config["class_name"]
      module = importlib.import_module(module_name)
      func = getattr(module, func_name)
      obj = func(use_case_specific_config["init_arg"])
      obj(os.getcwd()+args.yaml, args.target_app, qrrp_p, qrrp_X_train, qrrp_y_train, qrrp_tar_x_scaled, qrrp_tar_y_scaled, rank)
  except RuntimeError as e:
    print(e)
